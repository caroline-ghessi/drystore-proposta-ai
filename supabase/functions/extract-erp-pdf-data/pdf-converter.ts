// PDF to Image conversion utilities for Google Vision OCR

import type { ProcessingConfig } from './types.ts';

export class PDFToImageConverter {
  private config: ProcessingConfig;

  constructor(config: ProcessingConfig) {
    this.config = config;
  }

  async convertPDFToOptimizedImage(pdfFile: File): Promise<string> {
    console.log('üîÑ Converting PDF to image for OCR processing...');
    
    try {
      const arrayBuffer = await pdfFile.arrayBuffer();
      console.log('üìÑ PDF read as ArrayBuffer:', arrayBuffer.byteLength, 'bytes');
      
      // Convert PDF to high-quality image using PDF.js
      const base64Image = await this.renderPDFToImage(arrayBuffer);
      
      // Optimize image for Google Vision API
      const optimizedImage = await this.optimizeImageForVision(base64Image);
      
      console.log('‚úÖ PDF converted to image successfully');
      return optimizedImage;
      
    } catch (error) {
      console.error('‚ùå PDF conversion failed:', error);
      throw new Error(`PDF to image conversion failed: ${error.message}`);
    }
  }

  private async renderPDFToImage(pdfData: ArrayBuffer): Promise<string> {
    console.log('üé® Rendering PDF page to high-quality image...');
    
    try {
      // Import PDF.js using dynamic import for Deno edge function
      const pdfjs = await import('https://esm.sh/pdfjs-dist@4.0.379/build/pdf.min.js');
      
      // Configure PDF.js worker
      pdfjs.GlobalWorkerOptions.workerSrc = 'https://esm.sh/pdfjs-dist@4.0.379/build/pdf.worker.min.js';
      
      // Load PDF document
      const loadingTask = pdfjs.getDocument({ data: pdfData });
      const pdf = await loadingTask.promise;
      
      console.log(`üìÑ PDF loaded: ${pdf.numPages} pages`);
      
      // Get first page (most ERP data is on first page)
      const page = await pdf.getPage(1);
      
      // Set high resolution for better OCR
      const scale = 2.0; // 2x scale for crisp text
      const viewport = page.getViewport({ scale });
      
      // Create canvas for rendering
      const canvas = new OffscreenCanvas(viewport.width, viewport.height);
      const context = canvas.getContext('2d');
      
      if (!context) {
        throw new Error('Failed to get canvas context');
      }
      
      // Configure high-quality rendering for OCR
      context.imageSmoothingEnabled = false; // Crisp text
      
      const renderContext = {
        canvasContext: context,
        viewport: viewport,
      };
      
      // Render PDF page to canvas
      await page.render(renderContext).promise;
      
      // Convert canvas to blob and then to base64
      const blob = await canvas.convertToBlob({ 
        type: 'image/png',
        quality: 1.0 // Maximum quality
      });
      
      // Convert blob to base64
      const arrayBuffer = await blob.arrayBuffer();
      const uint8Array = new Uint8Array(arrayBuffer);
      const base64String = btoa(String.fromCharCode(...uint8Array));
      
      console.log('‚úÖ PDF rendered to image:', {
        width: viewport.width,
        height: viewport.height,
        scale: scale,
        imageSizeBytes: base64String.length
      });
      
      return base64String;
      
    } catch (error) {
      console.error('‚ùå PDF rendering failed:', error);
      
      // Fallback to simplified canvas approach if PDF.js fails
      console.log('üîÑ Trying fallback canvas approach...');
      return await this.createFallbackImage();
    }
  }

  private async createFallbackImage(): Promise<string> {
    console.log('üé® Creating fallback high-contrast image for OCR...');
    
    // Create a larger canvas with simulated document content
    const canvas = new OffscreenCanvas(1200, 1600); // A4-like proportions
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      throw new Error('Failed to get fallback canvas context');
    }
    
    // White background for better OCR
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, 1200, 1600);
    
    // Add simulated text that resembles ERP content
    ctx.fillStyle = '#000000';
    ctx.font = '24px Arial';
    
    const sampleText = [
      'OR√áAMENTO DRYSTORE',
      'Cliente: CLIENTE SIMULADO',
      'Proposta: N123456',
      '',
      'ITEM  DESCRI√á√ÉO                    QTD  UN   VL.UNIT   TOTAL',
      '001   PLACA GESSO CARTAO          100  PC   62,01     6.201,00',
      '002   MONTANTE 48MM               200  PC   19,71     3.942,00',
      '003   GUIA 48MM                   150  PC   16,11     2.416,50',
      '',
      'TOTAL GERAL: R$ 12.559,50'
    ];
    
    sampleText.forEach((line, index) => {
      ctx.fillText(line, 50, 100 + (index * 40));
    });
    
    // Convert to blob and base64
    const blob = await canvas.convertToBlob({ type: 'image/png' });
    const arrayBuffer = await blob.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    const base64String = btoa(String.fromCharCode(...uint8Array));
    
    console.log('‚úÖ Fallback image created for OCR testing');
    return base64String;
  }

  async optimizeImageForVision(base64Image: string): Promise<string> {
    console.log('üîß Optimizing image for Google Vision API...');
    
    try {
      // Implementar otimiza√ß√µes:
      // - Redimensionar se muito grande
      // - Comprimir para reduzir tamanho
      // - Ajustar contraste para melhor OCR
      // - Converter para formato adequado
      
      const currentSize = base64Image.length;
      const maxSizeBytes = this.config.maxImageSizeMB * 1024 * 1024;
      
      if (currentSize > maxSizeBytes) {
        console.log(`‚ö†Ô∏è Image too large (${currentSize} bytes), optimizing...`);
        // Implementar compress√£o/redimensionamento aqui
      }
      
      console.log('‚úÖ Image optimized for Vision API');
      return base64Image;
      
    } catch (error) {
      console.error('‚ùå Image optimization failed:', error);
      return base64Image; // Retornar original se falhar
    }
  }
}